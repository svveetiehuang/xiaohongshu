{"ast":null,"code":"var _jsxFileName = \"/Users/svveetie/Downloads/h \\u524D\\u7AEF/xhs/src/pages/discovery/components/NoteImg.js\";\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { Carousel, Switch, SmallPics, SmallPic } from '../style';\nimport { actionCreators } from '../store'; // 详情页\n\nclass NoteImg extends PureComponent {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(Carousel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"big-pic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, this.props.pics.map((item, index) => React.createElement(CSSTransition, {\n      key: item.get('id') // in 属性的值由 false 变 true 时执行入场动画（按时间给内部标签加上和移除 enter 相关的样式）\n      // 当 nextId 不等于 currentId 时执行动画（通常是相等的，store 中初始值也是相等的，只有点击按钮或缩略图时会改变 nextId 的值导致二者不等，右侧显示第二张图片并启动动画——同时移动两张图片）\n      // 动画靠属性 in 的值（布尔类型）的变化启动，渲染靠 props/store 中数据的变化启动\n      ,\n      in: this.props.nextId !== this.props.currentId // 点击左右按钮会决定动画切换的方向（行为改变数据，数据影响视觉）\n      ,\n      classNames: this.props.direction,\n      timeout: 800 // 动画执行完后，利用钩子函数把 nextId 的值给 currentId，二者再次相等（此时页面重新渲染，前一张图片消失）\n      ,\n      onEntered: this.props.changeCurrentId\n      /* 总结：\n      点击按钮/缩略图时，让 store 中两个 id 的值不等，触发动画，且重新渲染显示两张图（也有可能点击后二者仍相等，此时页面无任何变化）；\n      动画结束时，让 store 中的两个 id 值重新相等，检测到数据变化，页面重新渲染，只显示中间一张图，另外的图排到右边或左边（行内样式优先级高） */\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      // id 的值可能没有规律，只作为循环的 key；切换图片功能使用 index 进行判断\n      // 每次按左右按钮会改变图片的切换方向，也会改变即将出现的图片的位置，因此 this.props.direction 影响每次渲染的样式\n      className: index === this.props.currentId ? 'active ' + this.props.direction : this.props.direction,\n      style: {\n        // background-position 的 center 是 center center 的简写\n        background: 'url(' + item.get('bigUrl') + ') no-repeat center/contain',\n        // 只有 index 等于 currentId 或 nextId 的 li 才可以显示\n        // 两个 id 相等时显示一张图片，不等时同时显示两张（只在点击按钮/缩略图后到动画结束之前不相等，其余时间相等）\n        display: index === this.props.currentId || index === this.props.nextId ? 'block' : 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })))), React.createElement(Switch, {\n      className: \"left\",\n      onClick: this.props.handleLeft,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      className: \"right\",\n      onClick: this.props.handleRight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(SmallPics, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.props.pics.map((item, index) => {\n      return React.createElement(SmallPic, {\n        className: // 注意：因为在点击的同时要立马把对应缩略图变为 active，所以要和点击时立马发生变化的 nextId 做比较，一起变化\n        index === this.props.nextId ? 'active' : '',\n        style: {\n          background: 'url(' + item.get('smallUrl') + ') no-repeat center/cover'\n        } // 点击缩略图时，传入被点击缩略图的 index，改变 store 中 nextId 的值\n        ,\n        onClick: () => this.props.handleSmallPic(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    })));\n  }\n\n  componentDidMount() {\n    this.props.getNoteImg();\n  }\n\n}\n\nconst mapState = state => ({\n  pics: state.getIn(['discovery', 'pics']),\n  currentId: state.getIn(['discovery', 'currentId']),\n  nextId: state.getIn(['discovery', 'nextId']),\n  direction: state.getIn(['discovery', 'direction'])\n});\n\nconst mapDispatch = dispatch => ({\n  getNoteImg() {\n    dispatch(actionCreators.getNoteImg());\n  },\n\n  changeCurrentId() {\n    dispatch(actionCreators.changeCurrentId());\n  },\n\n  handleLeft() {\n    dispatch(actionCreators.lastPic());\n  },\n\n  handleRight() {\n    dispatch(actionCreators.nextPic());\n  },\n\n  handleSmallPic(index) {\n    dispatch(actionCreators.handleSmallPic(index));\n  }\n\n});\n\nexport default connect(mapState, mapDispatch)(NoteImg); // export default NoteImg","map":{"version":3,"sources":["/Users/svveetie/Downloads/h 前端/xhs/src/pages/discovery/components/NoteImg.js"],"names":["React","PureComponent","connect","CSSTransition","Carousel","Switch","SmallPics","SmallPic","actionCreators","NoteImg","render","props","pics","map","item","index","get","nextId","currentId","direction","changeCurrentId","background","display","handleLeft","handleRight","handleSmallPic","componentDidMount","getNoteImg","mapState","state","getIn","mapDispatch","dispatch","lastPic","nextPic"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport { CSSTransition } from 'react-transition-group'\nimport { Carousel, Switch, SmallPics, SmallPic } from '../style'\nimport { actionCreators } from '../store'\n\n// 详情页\nclass NoteImg extends PureComponent {\n  render () {\n    return (\n      <div>\n        <Carousel>\n          {/* Carousel 包含大图和切换按钮 */}\n          <ul className='big-pic'>\n            {/* 保证内部所有标签都能使用动画 加上之后 由于异步数据并非首次渲染 首次渲染图片时也会触发动画 此处不使用 */}\n            {/* <TransitionGroup> */}\n            {this.props.pics.map((item, index) => (\n              <CSSTransition\n                key={item.get('id')}\n                // in 属性的值由 false 变 true 时执行入场动画（按时间给内部标签加上和移除 enter 相关的样式）\n                // 当 nextId 不等于 currentId 时执行动画（通常是相等的，store 中初始值也是相等的，只有点击按钮或缩略图时会改变 nextId 的值导致二者不等，右侧显示第二张图片并启动动画——同时移动两张图片）\n                // 动画靠属性 in 的值（布尔类型）的变化启动，渲染靠 props/store 中数据的变化启动\n                in={this.props.nextId !== this.props.currentId}\n                // 点击左右按钮会决定动画切换的方向（行为改变数据，数据影响视觉）\n                classNames={this.props.direction}\n                timeout={800}\n                // 动画执行完后，利用钩子函数把 nextId 的值给 currentId，二者再次相等（此时页面重新渲染，前一张图片消失）\n                onEntered={this.props.changeCurrentId}\n                /* 总结：\n                点击按钮/缩略图时，让 store 中两个 id 的值不等，触发动画，且重新渲染显示两张图（也有可能点击后二者仍相等，此时页面无任何变化）；\n                动画结束时，让 store 中的两个 id 值重新相等，检测到数据变化，页面重新渲染，只显示中间一张图，另外的图排到右边或左边（行内样式优先级高） */\n              >\n                <li\n                  // id 的值可能没有规律，只作为循环的 key；切换图片功能使用 index 进行判断\n                  // 每次按左右按钮会改变图片的切换方向，也会改变即将出现的图片的位置，因此 this.props.direction 影响每次渲染的样式\n                  className={\n                    index === this.props.currentId\n                      ? 'active ' + this.props.direction\n                      : this.props.direction\n                  }\n                  style={{\n                    // background-position 的 center 是 center center 的简写\n                    background:\n                      'url(' +\n                      item.get('bigUrl') +\n                      ') no-repeat center/contain',\n                    // 只有 index 等于 currentId 或 nextId 的 li 才可以显示\n                    // 两个 id 相等时显示一张图片，不等时同时显示两张（只在点击按钮/缩略图后到动画结束之前不相等，其余时间相等）\n                    display:\n                      index === this.props.currentId ||\n                      index === this.props.nextId\n                        ? 'block'\n                        : 'none'\n                  }}\n                />\n              </CSSTransition>\n            ))}\n            {/* </TransitionGroup> */}\n          </ul>\n\n          <Switch className='left' onClick={this.props.handleLeft} />\n          <Switch className='right' onClick={this.props.handleRight} />\n        </Carousel>\n\n        <SmallPics>\n          {this.props.pics.map((item, index) => {\n            return (\n              <SmallPic\n                className={\n                  // 注意：因为在点击的同时要立马把对应缩略图变为 active，所以要和点击时立马发生变化的 nextId 做比较，一起变化\n                  index === this.props.nextId ? 'active' : ''\n                }\n                style={{\n                  background:\n                    'url(' + item.get('smallUrl') + ') no-repeat center/cover'\n                }}\n                // 点击缩略图时，传入被点击缩略图的 index，改变 store 中 nextId 的值\n                onClick={() => this.props.handleSmallPic(index)}\n              />\n            )\n          })}\n        </SmallPics>\n      </div>\n    )\n  }\n\n  componentDidMount () {\n    this.props.getNoteImg()\n  }\n}\n\nconst mapState = state => ({\n  pics: state.getIn(['discovery', 'pics']),\n  currentId: state.getIn(['discovery', 'currentId']),\n  nextId: state.getIn(['discovery', 'nextId']),\n  direction: state.getIn(['discovery', 'direction'])\n})\n\nconst mapDispatch = dispatch => ({\n  getNoteImg () {\n    dispatch(actionCreators.getNoteImg())\n  },\n  changeCurrentId () {\n    dispatch(actionCreators.changeCurrentId())\n  },\n  handleLeft () {\n    dispatch(actionCreators.lastPic())\n  },\n  handleRight () {\n    dispatch(actionCreators.nextPic())\n  },\n  handleSmallPic (index) {\n    dispatch(actionCreators.handleSmallPic(index))\n  }\n})\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(NoteImg)\n\n// export default NoteImg\n"]},"metadata":{},"sourceType":"module"}