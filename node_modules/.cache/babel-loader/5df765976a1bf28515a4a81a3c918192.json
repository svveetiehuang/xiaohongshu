{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes'; // NoteImg 组件\n\nexport const getNoteImg = () => {\n  return dispatch => {\n    axios.get('/api/discovery.json').then(res => {\n      dispatch(changeImgData(res.data.data));\n    }).catch(() => {\n      alert('获取图片数据失败，请检查 json 文件是否存在');\n    });\n  };\n};\nexport const changeCurrentId = () => ({\n  type: actionTypes.CHANGE_CURRENT_ID\n});\nexport const nextPic = () => ({\n  type: actionTypes.NEXT_PIC\n});\nexport const lastPic = () => ({\n  type: actionTypes.LAST_PIC\n});\nexport const handleSmallPic = index => ({\n  type: actionTypes.SMALL_PIC_CLICK,\n  index\n});\nexport const toggleShareBarFixed = show => ({\n  type: actionTypes.TOGGLE_SHARE_BAR_FIXED,\n  show\n}); // NoteContent 组件\n\nexport const getNoteContent = () => {\n  return dispatch => {\n    axios.get('/api/discovery.json').then(res => {\n      dispatch(changeContentData(res.data.data));\n    }).catch(() => {\n      alert('获取文本数据失败，请检查 json 文件是否存在');\n    });\n  };\n};\nexport const getAuthorData = () => {\n  return dispatch => {\n    axios.get('/api/discovery.json').then(dispatch(changeAuthorData())).catch(() => {\n      alert('获取作者数据失败，请检查 json 文件是否存在');\n    });\n  };\n}; // 供内部使用的方法（不导出）\n\nconst changeImgData = data => ({\n  type: actionTypes.CHANGE_IMG_DATA,\n  data\n});\n\nconst changeContentData = data => ({\n  type: actionTypes.CHANGE_CONTENT_DATA,\n  data\n});\n\nconst changeAuthorData = data => ({\n  type: actionTypes.CHANGE_AUTHOR_DATA,\n  data\n});","map":{"version":3,"sources":["/Users/svveetie/Downloads/h 前端/xhs/src/pages/discovery/store/actionCreators.js"],"names":["axios","actionTypes","getNoteImg","dispatch","get","then","res","changeImgData","data","catch","alert","changeCurrentId","type","CHANGE_CURRENT_ID","nextPic","NEXT_PIC","lastPic","LAST_PIC","handleSmallPic","index","SMALL_PIC_CLICK","toggleShareBarFixed","show","TOGGLE_SHARE_BAR_FIXED","getNoteContent","changeContentData","getAuthorData","changeAuthorData","CHANGE_IMG_DATA","CHANGE_CONTENT_DATA","CHANGE_AUTHOR_DATA"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAOC,QAAQ,IAAI;AACjBH,IAAAA,KAAK,CACFI,GADH,CACO,qBADP,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACXH,MAAAA,QAAQ,CAACI,aAAa,CAACD,GAAG,CAACE,IAAJ,CAASA,IAAV,CAAd,CAAR;AACD,KAJH,EAKGC,KALH,CAKS,MAAM;AACXC,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACD,KAPH;AAQD,GATD;AAUD,CAXM;AAaP,OAAO,MAAMC,eAAe,GAAG,OAAO;AACpCC,EAAAA,IAAI,EAAEX,WAAW,CAACY;AADkB,CAAP,CAAxB;AAIP,OAAO,MAAMC,OAAO,GAAG,OAAO;AAC5BF,EAAAA,IAAI,EAAEX,WAAW,CAACc;AADU,CAAP,CAAhB;AAIP,OAAO,MAAMC,OAAO,GAAG,OAAO;AAC5BJ,EAAAA,IAAI,EAAEX,WAAW,CAACgB;AADU,CAAP,CAAhB;AAIP,OAAO,MAAMC,cAAc,GAAGC,KAAK,KAAK;AACtCP,EAAAA,IAAI,EAAEX,WAAW,CAACmB,eADoB;AAEtCD,EAAAA;AAFsC,CAAL,CAA5B;AAKP,OAAO,MAAME,mBAAmB,GAAGC,IAAI,KAAK;AAC1CV,EAAAA,IAAI,EAAEX,WAAW,CAACsB,sBADwB;AAE1CD,EAAAA;AAF0C,CAAL,CAAhC,C,CAKP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAOrB,QAAQ,IAAI;AACjBH,IAAAA,KAAK,CACFI,GADH,CACO,qBADP,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACXH,MAAAA,QAAQ,CAACsB,iBAAiB,CAACnB,GAAG,CAACE,IAAJ,CAASA,IAAV,CAAlB,CAAR;AACD,KAJH,EAKGC,KALH,CAKS,MAAM;AACXC,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACD,KAPH;AAQD,GATD;AAUD,CAXM;AAaP,OAAO,MAAMgB,aAAa,GAAG,MAAM;AACjC,SAAOvB,QAAQ,IAAI;AACjBH,IAAAA,KAAK,CACFI,GADH,CACO,qBADP,EAEGC,IAFH,CAEQF,QAAQ,CAACwB,gBAAgB,EAAjB,CAFhB,EAGGlB,KAHH,CAGS,MAAM;AACXC,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACD,KALH;AAMD,GAPD;AAQD,CATM,C,CAUP;;AACA,MAAMH,aAAa,GAAGC,IAAI,KAAK;AAC7BI,EAAAA,IAAI,EAAEX,WAAW,CAAC2B,eADW;AAE7BpB,EAAAA;AAF6B,CAAL,CAA1B;;AAKA,MAAMiB,iBAAiB,GAAGjB,IAAI,KAAK;AACjCI,EAAAA,IAAI,EAAEX,WAAW,CAAC4B,mBADe;AAEjCrB,EAAAA;AAFiC,CAAL,CAA9B;;AAKA,MAAMmB,gBAAgB,GAAGnB,IAAI,KAAK;AAChCI,EAAAA,IAAI,EAAEX,WAAW,CAAC6B,kBADc;AAEhCtB,EAAAA;AAFgC,CAAL,CAA7B","sourcesContent":["import axios from 'axios'\nimport * as actionTypes from './actionTypes'\n\n// NoteImg 组件\nexport const getNoteImg = () => {\n  return dispatch => {\n    axios\n      .get('/api/discovery.json')\n      .then(res => {\n        dispatch(changeImgData(res.data.data))\n      })\n      .catch(() => {\n        alert('获取图片数据失败，请检查 json 文件是否存在')\n      })\n  }\n}\n\nexport const changeCurrentId = () => ({\n  type: actionTypes.CHANGE_CURRENT_ID\n})\n\nexport const nextPic = () => ({\n  type: actionTypes.NEXT_PIC\n})\n\nexport const lastPic = () => ({\n  type: actionTypes.LAST_PIC\n})\n\nexport const handleSmallPic = index => ({\n  type: actionTypes.SMALL_PIC_CLICK,\n  index\n})\n\nexport const toggleShareBarFixed = show => ({\n  type: actionTypes.TOGGLE_SHARE_BAR_FIXED,\n  show\n})\n\n// NoteContent 组件\nexport const getNoteContent = () => {\n  return dispatch => {\n    axios\n      .get('/api/discovery.json')\n      .then(res => {\n        dispatch(changeContentData(res.data.data))\n      })\n      .catch(() => {\n        alert('获取文本数据失败，请检查 json 文件是否存在')\n      })\n  }\n}\n\nexport const getAuthorData = () => {\n  return dispatch => {\n    axios\n      .get('/api/discovery.json')\n      .then(dispatch(changeAuthorData()))\n      .catch(() => {\n        alert('获取作者数据失败，请检查 json 文件是否存在')\n      })\n  }\n}\n// 供内部使用的方法（不导出）\nconst changeImgData = data => ({\n  type: actionTypes.CHANGE_IMG_DATA,\n  data\n})\n\nconst changeContentData = data => ({\n  type: actionTypes.CHANGE_CONTENT_DATA,\n  data\n})\n\nconst changeAuthorData = data => ({\n  type: actionTypes.CHANGE_AUTHOR_DATA,\n  data\n})\n"]},"metadata":{},"sourceType":"module"}